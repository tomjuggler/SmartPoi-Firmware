review poi code, need to reduce memory usage
change pattern (same method as brightness change)
look more at spiffs save router settings, how to switch from router to AP mode (main and auxillary)

form fields: 

>>>>>>>>>>>>>>>>Current: >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

		router     	-Huawei
		pass		-1235ABC
		newChannel	-1-13
		newAddr4 	-2-255 (for ip) .....change to ip field 4

>>>>>>>>>>>>>>>>New: >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

spiffs:		router     	-Huawei-B319-...
spiffs:		pass		-12345ABC
pre-defined	apName?		-bluefire
pre-defined	apPass?		-what if this is forgotten? //secure this somehow?
  eeprom:	channel		-1-13 (11 for US, 14 for Australia?) //for AP mode only
  eeprom:	maxChannelNum (eg 13 for SA, 11 for USA, 14 for Australia)

****************done:**************************************************************
eeprom:		addrNumD  	192	(full ip eg: 192.168.8.77) 
eeprom:		addrNumA	168	
eeprom:		addrNumB	8	
eeprom:		addrNumC	77	
***********************************************************************************
		gatewayField1
		gatewayField2
		gatewayField3
		gatewayField4

 eeprom:	patternToShow (3 patterns currently, change using this field rather, not randomly!)
		
		
		
UPDATES: 
ESP8266 code: 
Dir dir = LittleFS.openDir(path);
  path = String();

  String output = "[";
  while (dir.next())
  {
    File entry = dir.openFile("r");
    if (output != "[")
      output += ',';
    bool isDir = false;
    output += "{\"type\":\"";
    output += (isDir) ? "dir" : "file";
    output += "\",\"name\":\"";
    output += String(entry.name());
    output += "\"}";
    entry.close();
ESP32 code: 
File root = LittleFS.open(path);
String output = "[";
File file = root.openNextFile();

while (file)
{
  if (output != "[") output += ',';
  output += "{\"type\":\"";
  output += (file.isDirectory()) ? "dir" : "file";
  output += "\",\"name\":\"";
  output += String(file.name());
  output += "\"}";
  file = root.openNextFile();

ESP8266 code: 
size_t getTotalSpace()
{
    FSInfo fs_info;
    LittleFS.info(fs_info);
    return fs_info.totalBytes;
}

/**
 * @brief Get the remaining space in LittleFS (ESP8266)
 *
 * @return size_t Remaining space in bytes
 */
size_t getRemainingSpace()
{
    FSInfo fs_info;
    LittleFS.info(fs_info);
    return fs_info.totalBytes - fs_info.usedBytes;
}

/**
 * @brief Get the used space in LittleFS (ESP8266)
 *
 * @return size_t Used space in bytes
 */
size_t getUsedSpace()
{
    FSInfo fs_info;
    LittleFS.info(fs_info);
    return fs_info.usedBytes;
}
ESP32 code: 
size_t getTotalSpace()
{
    return LittleFS.totalBytes();
}

/**
 * @brief Get the remaining space in LittleFS (ESP8266)
 *
 * @return size_t Remaining space in bytes
 */
size_t getRemainingSpace()
{
    return LittleFS.totalBytes() - LittleFS.usedBytes();
}

/**
 * @brief Get the used space in LittleFS (ESP8266)
 *
 * @return size_t Used space in bytes
 */
size_t getUsedSpace()
{
    return LittleFS.usedBytes();
}

ESP8266 code: 
bool checkFileSpace(size_t fileSize)
{
  // Get total available space on LittleFS
  FSInfo fs_info;
  LittleFS.info(fs_info);
  size_t totalSpace = fs_info.totalBytes;
  size_t availableSpace = fs_info.usedBytes;
ESP32 code: 
bool checkFileSpace(size_t fileSize)
{
  // Get total available space on LittleFS
  size_t totalSpace = LittleFS.totalBytes();
  size_t availableSpace = LittleFS.usedBytes();	
		
		